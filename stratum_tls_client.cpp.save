#include "stratum_tls_client.h"
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <cstring>
#include <iostream>
#include <sstream>
#include <iomanip>

StratumTLSClient::StratumTLSClient(const std::string& host, int port, const std::string& address)
    : pool_host(host), pool_port(port), miner_address(address), ssl(nullptr), ctx(nullptr), server_fd(-1) {}

bool StratumTLSClient::connect_and_handshake() {
    ctx = SSL_CTX_new(TLS_client_method());
    if (!ctx) return false;

    struct addrinfo hints{}, *res;
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    std::string port_str = std::to_string(pool_port);
    if (getaddrinfo(pool_host.c_str(), port_str.c_str(), &hints, &res) != 0) return false;

    server_fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (server_fd < 0) return false;
    if (connect(server_fd, res->ai_addr, res->ai_addrlen) != 0) return false;

    ssl = SSL_new(ctx);
    SSL_set_fd(ssl, server_fd);
    if (SSL_connect(ssl) <= 0) return false;

    freeaddrinfo(res);
    return true;
}

bool StratumTLSClient::send_json(const nlohmann::json& j) {
    std::string msg = j.dump() + "\n";
    return SSL_write(ssl, msg.c_str(), msg.size()) > 0;
}

bool StratumTLSClient::read_json(nlohmann::json& out) {
    char buffer[4096];
    int bytes = SSL_read(ssl, buffer, sizeof(buffer) - 1);
    if (bytes <= 0) return false;
    buffer[bytes] = '\0';
    try {
        out = nlohmann::json::parse(buffer);
        return true;
    } catch (...) {
        return false;
    }
}

bool StratumTLSClient::subscribe_and_authorize() {
    nlohmann::json subscribe = {
        {"id", 1},
        {"jsonrpc", "2.0"},
        {"method", "mining.subscribe"},
        {"params", {"ErgoMiner/0.1"}}
    };
    send_json(subscribe);

    nlohmann::json response;
    if (!read_json(response)) return false;

    nlohmann::json authorize = {
        {"id", 2},
        {"jsonrpc", "2.0"},
        {"method", "mining.authorize"},
        {"params", {miner_address, "x"}}
    };
    send_json(authorize);
    return read_json(response);
}

bool StratumTLSClient::wait_for_job(Job& job) {
    nlohmann::json response;
    if (!read_json(response)) return false;

    if (response.contains("method") && response["method"] == "mining.notify") {
        auto p = response["params"];
        job.job_id = p[0];
        job.header_hash = hex_to_bytes(p[2]);
        job.target_difficulty = hex_to_bytes(p[6]);
        return true;
    }
    return false;
}

void StratumTLSClient::submit_share(const std::string& job_id, uint64_t nonce, const Job& job) {
    // WoolyPooly expects nonce as decimal string, not hex
    std::string nonce_str = std::to_string(nonce);

    nlohmann::json share = {
        {"id", 4},
        {"jsonrpc", "2.0"},
        {"method", "mining.submit"},
        {"params", {miner_address, job_id, "00000000", bytes_to_hex(job.header_hash), nonce_str}}
    };

    send_json(share);

    nlohmann::json response;
    read_json(response);
    std::cout << "[>] Share response: " << response.dump() << std::endl;
}

std::vector<uint8_t> StratumTLSClient::hex_to_bytes(const std::string& hex) {
    std::vector<uint8_t> bytes;
    for (size_t i = 0; i < hex.length(); i += 2) {
        std::string byteString = hex.substr(i, 2);
        uint8_t byte = static_cast<uint8_t>(strtol(byteString.c_str(), nullptr, 16));
        bytes.push_back(byte);
    }
    return bytes;
}

std::string StratumTLSClient::bytes_to_hex(const std::vector<uint8_t>& bytes) {
    std::stringstream ss;
    for (uint8_t b : bytes) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)b;
    }
    return ss.str();
}

void StratumTLSClient::close() {
    if (ssl) {
        SSL_shutdown(ssl);
        SSL_free(ssl);
    }
    if (server_fd != -1) ::close(server_fd);
    if (ctx) SSL_CTX_free(ctx);
}
