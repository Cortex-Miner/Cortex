{"ast":null,"code":"var _jsxFileName = \"/home/arohbe/ergo_cuda_miner/src/dashboard-frontend/src/GpuMonitor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport Slider from \"@mui/material/Slider\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GpuMonitor() {\n  _s();\n  const [gpus, setGpus] = useState([]);\n  const [history, setHistory] = useState({});\n  const [ocValues, setOcValues] = useState({});\n  const [snackbar, setSnackbar] = useState(null);\n  const intervalRef = useRef(null);\n\n  // Poll stats every 2s\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const res = await fetch(\"http://localhost:4201/api/gpu/stats\");\n        const data = await res.json();\n        if (!data.gpus) throw new Error(\"No GPU stats found\");\n        setGpus(data.gpus);\n        setHistory(prev => {\n          const updated = {\n            ...prev\n          };\n          data.gpus.forEach(gpu => {\n            if (!updated[gpu.index]) updated[gpu.index] = [];\n            const arr = [...updated[gpu.index], {\n              ...gpu,\n              time: Date.now()\n            }];\n            updated[gpu.index] = arr.slice(-30); // last 60s if polling every 2s\n          });\n          return updated;\n        });\n      } catch (err) {\n        setSnackbar({\n          msg: err.message,\n          type: \"error\"\n        });\n      }\n    };\n    fetchStats();\n    intervalRef.current = setInterval(fetchStats, 2000);\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, []);\n  const handleOcChange = (idx, field, value) => {\n    setOcValues(prev => ({\n      ...prev,\n      [idx]: {\n        ...prev[idx],\n        [field]: value\n      }\n    }));\n  };\n  const handleOcApply = async gpu => {\n    const values = ocValues[gpu.index] || {};\n    try {\n      const body = {\n        index: gpu.index\n      };\n      if (gpu.controls.fan && values.fan !== undefined) body.fan = values.fan;\n      if (gpu.controls.power && values.powerLimit !== undefined) body.powerLimit = values.powerLimit;\n      if (gpu.controls.coreClock && values.coreClock !== undefined) body.coreClock = values.coreClock;\n      if (gpu.controls.memClock && values.memClock !== undefined) body.memClock = values.memClock;\n      if (Object.keys(body).length <= 1) {\n        setSnackbar({\n          msg: \"No changes selected.\",\n          type: \"error\"\n        });\n        return;\n      }\n      const res = await fetch(\"http://localhost:4201/api/gpu/overclock\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      // Try to parse as JSON, fallback if error (handles HTML error page)\n      let resp;\n      try {\n        resp = await res.json();\n      } catch {\n        resp = {};\n      }\n      if (res.ok) {\n        setSnackbar({\n          msg: \"Settings applied!\",\n          type: \"success\"\n        });\n      } else {\n        setSnackbar({\n          msg: resp.error || \"Failed to apply settings\",\n          type: \"error\"\n        });\n      }\n    } catch (err) {\n      setSnackbar({\n        msg: err.message,\n        type: \"error\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      background: \"linear-gradient(135deg, #181c28 70%, #19192a 100%)\",\n      minHeight: \"100vh\",\n      py: 6,\n      px: {\n        xs: 1,\n        sm: 4,\n        md: 6\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      color: \"primary\",\n      gutterBottom: true,\n      align: \"center\",\n      sx: {\n        fontWeight: 700,\n        letterSpacing: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(SettingsIcon, {\n        fontSize: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), \" GPU Monitor & Control\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), gpus.length > 0 && !gpus[0].controls.fan && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        color: \"#FFCC00\",\n        background: \"#232323\",\n        p: 2,\n        borderRadius: 2,\n        mb: 3,\n        textAlign: \"center\",\n        fontWeight: 600\n      },\n      children: [\"\\u26A0\\uFE0F Advanced fan and overclock controls are unavailable.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 66\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: 400\n        },\n        children: \"Run backend in a desktop environment or with Xvfb for full controls.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      justifyContent: \"center\",\n      children: gpus.map(gpu => {\n        var _ocValues$gpu$index$f, _ocValues$gpu$index, _ocValues$gpu$index$p, _ocValues$gpu$index2, _ocValues$gpu$index$c, _ocValues$gpu$index3, _ocValues$gpu$index$m, _ocValues$gpu$index4;\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 10,\n          md: 8,\n          lg: 6,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              borderRadius: 4,\n              background: \"linear-gradient(135deg, #232940 90%, #1b1e2c 100%)\",\n              boxShadow: 7,\n              mb: 4\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                color: \"secondary\",\n                gutterBottom: true,\n                sx: {\n                  fontWeight: 600\n                },\n                children: [gpu.name, \" (#\", gpu.index, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: \"flex\",\n                  gap: 4,\n                  flexWrap: \"wrap\",\n                  mb: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h4\",\n                  sx: {\n                    color: \"#ffbe0b\"\n                  },\n                  children: [gpu.temp, \"\\xB0C\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  sx: {\n                    color: \"#00e676\"\n                  },\n                  children: [gpu.power, \"W\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  sx: {\n                    color: \"#2979ff\"\n                  },\n                  children: [gpu.util, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  sx: {\n                    color: \"#b2b2b2\"\n                  },\n                  children: [\"Fan: \", gpu.fan, \"% | Clock: \", gpu.coreClock, \" MHz | Mem: \", gpu.memClock, \" MHz\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  sx: {\n                    color: \"#b2b2b2\"\n                  },\n                  children: [\"VRAM: \", gpu.memUsed, \" / \", gpu.memTotal, \" MiB\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  height: 180,\n                  mb: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                  width: \"100%\",\n                  height: \"100%\",\n                  children: /*#__PURE__*/_jsxDEV(LineChart, {\n                    data: history[gpu.index] || [],\n                    children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                      dataKey: \"time\",\n                      hide: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                      domain: ['auto', 'auto']\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                      labelFormatter: t => new Date(t).toLocaleTimeString(),\n                      formatter: (v, n) => [v, n.toUpperCase()]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Line, {\n                      type: \"monotone\",\n                      dataKey: \"temp\",\n                      stroke: \"#ffbe0b\",\n                      dot: false,\n                      name: \"Temp\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Line, {\n                      type: \"monotone\",\n                      dataKey: \"power\",\n                      stroke: \"#00e676\",\n                      dot: false,\n                      name: \"Power\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Line, {\n                      type: \"monotone\",\n                      dataKey: \"util\",\n                      stroke: \"#2979ff\",\n                      dot: false,\n                      name: \"Util\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 2\n                },\n                children: [gpu.controls.fan && /*#__PURE__*/_jsxDEV(Box, {\n                  mb: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"Fan Speed (%)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                    min: 0,\n                    max: 100,\n                    value: (_ocValues$gpu$index$f = (_ocValues$gpu$index = ocValues[gpu.index]) === null || _ocValues$gpu$index === void 0 ? void 0 : _ocValues$gpu$index.fan) !== null && _ocValues$gpu$index$f !== void 0 ? _ocValues$gpu$index$f : gpu.fan,\n                    onChange: (_, v) => handleOcChange(gpu.index, \"fan\", v),\n                    valueLabelDisplay: \"auto\",\n                    sx: {\n                      color: \"#ffbe0b\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this), gpu.controls.power && /*#__PURE__*/_jsxDEV(Box, {\n                  mb: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"Power Limit (W)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                    min: 50,\n                    max: gpu.powerLimit,\n                    value: (_ocValues$gpu$index$p = (_ocValues$gpu$index2 = ocValues[gpu.index]) === null || _ocValues$gpu$index2 === void 0 ? void 0 : _ocValues$gpu$index2.powerLimit) !== null && _ocValues$gpu$index$p !== void 0 ? _ocValues$gpu$index$p : gpu.powerLimit,\n                    onChange: (_, v) => handleOcChange(gpu.index, \"powerLimit\", v),\n                    valueLabelDisplay: \"auto\",\n                    sx: {\n                      color: \"#00e676\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), gpu.controls.coreClock && /*#__PURE__*/_jsxDEV(Box, {\n                  mb: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"Core Clock Offset (MHz)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                    min: -300,\n                    max: 300,\n                    value: (_ocValues$gpu$index$c = (_ocValues$gpu$index3 = ocValues[gpu.index]) === null || _ocValues$gpu$index3 === void 0 ? void 0 : _ocValues$gpu$index3.coreClock) !== null && _ocValues$gpu$index$c !== void 0 ? _ocValues$gpu$index$c : 0,\n                    onChange: (_, v) => handleOcChange(gpu.index, \"coreClock\", v),\n                    valueLabelDisplay: \"auto\",\n                    sx: {\n                      color: \"#2979ff\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 21\n                }, this), gpu.controls.memClock && /*#__PURE__*/_jsxDEV(Box, {\n                  mb: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"Memory Clock Offset (MHz)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                    min: -1000,\n                    max: 2000,\n                    value: (_ocValues$gpu$index$m = (_ocValues$gpu$index4 = ocValues[gpu.index]) === null || _ocValues$gpu$index4 === void 0 ? void 0 : _ocValues$gpu$index4.memClock) !== null && _ocValues$gpu$index$m !== void 0 ? _ocValues$gpu$index$m : 0,\n                    onChange: (_, v) => handleOcChange(gpu.index, \"memClock\", v),\n                    valueLabelDisplay: \"auto\",\n                    sx: {\n                      color: \"#ab47bc\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 21\n                }, this), (gpu.controls.fan || gpu.controls.power || gpu.controls.coreClock || gpu.controls.memClock) && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  sx: {\n                    mt: 2,\n                    px: 4,\n                    fontWeight: 600\n                  },\n                  onClick: () => handleOcApply(gpu),\n                  startIcon: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 34\n                  }, this),\n                  children: \"Apply Changes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, gpu.index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!snackbar,\n      autoHideDuration: 5000,\n      onClose: () => setSnackbar(null),\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setSnackbar(null),\n        severity: (snackbar === null || snackbar === void 0 ? void 0 : snackbar.type) || \"success\",\n        children: snackbar === null || snackbar === void 0 ? void 0 : snackbar.msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(GpuMonitor, \"1aZVNsBzQ5MJRGrLKOHhTYLQrSo=\");\n_c = GpuMonitor;\nvar _c;\n$RefreshReg$(_c, \"GpuMonitor\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Grid","Card","CardContent","Typography","Slider","Button","Box","Snackbar","Alert","LineChart","Line","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","SettingsIcon","jsxDEV","_jsxDEV","GpuMonitor","_s","gpus","setGpus","history","setHistory","ocValues","setOcValues","snackbar","setSnackbar","intervalRef","fetchStats","res","fetch","data","json","Error","prev","updated","forEach","gpu","index","arr","time","Date","now","slice","err","msg","message","type","current","setInterval","clearInterval","handleOcChange","idx","field","value","handleOcApply","values","body","controls","fan","undefined","power","powerLimit","coreClock","memClock","Object","keys","length","method","headers","JSON","stringify","resp","ok","error","sx","background","minHeight","py","px","xs","sm","md","children","variant","color","gutterBottom","align","fontWeight","letterSpacing","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","p","borderRadius","mb","textAlign","style","container","spacing","justifyContent","map","_ocValues$gpu$index$f","_ocValues$gpu$index","_ocValues$gpu$index$p","_ocValues$gpu$index2","_ocValues$gpu$index$c","_ocValues$gpu$index3","_ocValues$gpu$index$m","_ocValues$gpu$index4","item","lg","boxShadow","name","display","gap","flexWrap","temp","util","memUsed","memTotal","height","width","dataKey","hide","domain","labelFormatter","t","toLocaleTimeString","formatter","v","n","toUpperCase","stroke","dot","mt","min","max","onChange","_","valueLabelDisplay","onClick","startIcon","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","_c","$RefreshReg$"],"sources":["/home/arohbe/ergo_cuda_miner/src/dashboard-frontend/src/GpuMonitor.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport Slider from \"@mui/material/Slider\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport SettingsIcon from \"@mui/icons-material/Settings\";\n\ntype GpuStat = {\n  index: number;\n  name: string;\n  temp: number;\n  util: number;\n  fan: number;\n  coreClock: number;\n  memClock: number;\n  power: number;\n  powerLimit: number;\n  memUsed: number;\n  memTotal: number;\n  controls: {\n    fan: boolean;\n    power: boolean;\n    coreClock: boolean;\n    memClock: boolean;\n  };\n};\n\ntype HistoryPoint = GpuStat & { time: number };\n\nexport default function GpuMonitor() {\n  const [gpus, setGpus] = useState<GpuStat[]>([]);\n  const [history, setHistory] = useState<{ [idx: number]: HistoryPoint[] }>({});\n  const [ocValues, setOcValues] = useState<{ [idx: number]: any }>({});\n  const [snackbar, setSnackbar] = useState<{ msg: string, type: \"success\" | \"error\" } | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Poll stats every 2s\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const res = await fetch(\"http://localhost:4201/api/gpu/stats\");\n        const data = await res.json();\n        if (!data.gpus) throw new Error(\"No GPU stats found\");\n        setGpus(data.gpus);\n        setHistory(prev => {\n          const updated = { ...prev };\n          data.gpus.forEach((gpu: GpuStat) => {\n            if (!updated[gpu.index]) updated[gpu.index] = [];\n            const arr = [...updated[gpu.index], { ...gpu, time: Date.now() }];\n            updated[gpu.index] = arr.slice(-30); // last 60s if polling every 2s\n          });\n          return updated;\n        });\n      } catch (err: any) {\n        setSnackbar({ msg: err.message, type: \"error\" });\n      }\n    };\n    fetchStats();\n    intervalRef.current = setInterval(fetchStats, 2000);\n    return () => { if (intervalRef.current) clearInterval(intervalRef.current); };\n  }, []);\n\n  const handleOcChange = (idx: number, field: string, value: number) => {\n    setOcValues(prev => ({\n      ...prev,\n      [idx]: { ...prev[idx], [field]: value }\n    }));\n  };\n\n  const handleOcApply = async (gpu: GpuStat) => {\n    const values = ocValues[gpu.index] || {};\n    try {\n      const body: any = { index: gpu.index };\n      if (gpu.controls.fan && values.fan !== undefined) body.fan = values.fan;\n      if (gpu.controls.power && values.powerLimit !== undefined) body.powerLimit = values.powerLimit;\n      if (gpu.controls.coreClock && values.coreClock !== undefined) body.coreClock = values.coreClock;\n      if (gpu.controls.memClock && values.memClock !== undefined) body.memClock = values.memClock;\n\n      if (Object.keys(body).length <= 1) {\n        setSnackbar({ msg: \"No changes selected.\", type: \"error\" });\n        return;\n      }\n\n      const res = await fetch(\"http://localhost:4201/api/gpu/overclock\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body)\n      });\n      // Try to parse as JSON, fallback if error (handles HTML error page)\n      let resp;\n      try {\n        resp = await res.json();\n      } catch {\n        resp = {};\n      }\n      if (res.ok) {\n        setSnackbar({ msg: \"Settings applied!\", type: \"success\" });\n      } else {\n        setSnackbar({ msg: resp.error || \"Failed to apply settings\", type: \"error\" });\n      }\n    } catch (err: any) {\n      setSnackbar({ msg: err.message, type: \"error\" });\n    }\n  };\n\n  return (\n    <Box sx={{\n      background: \"linear-gradient(135deg, #181c28 70%, #19192a 100%)\",\n      minHeight: \"100vh\",\n      py: 6, px: { xs: 1, sm: 4, md: 6 }\n    }}>\n      <Typography variant=\"h3\" color=\"primary\" gutterBottom align=\"center\" sx={{ fontWeight: 700, letterSpacing: 1 }}>\n        <SettingsIcon fontSize=\"large\" /> GPU Monitor &amp; Control\n      </Typography>\n      {gpus.length > 0 && !gpus[0].controls.fan && (\n        <Box sx={{\n          color: \"#FFCC00\",\n          background: \"#232323\",\n          p: 2,\n          borderRadius: 2,\n          mb: 3,\n          textAlign: \"center\",\n          fontWeight: 600\n        }}>\n          ⚠️ Advanced fan and overclock controls are unavailable.<br />\n          <span style={{ fontWeight: 400 }}>Run backend in a desktop environment or with Xvfb for full controls.</span>\n        </Box>\n      )}\n      <Grid container spacing={4} justifyContent=\"center\">\n        {gpus.map(gpu => (\n          <Grid item xs={12} sm={10} md={8} lg={6} key={gpu.index}>\n            <Card sx={{\n              borderRadius: 4,\n              background: \"linear-gradient(135deg, #232940 90%, #1b1e2c 100%)\",\n              boxShadow: 7,\n              mb: 4,\n            }}>\n              <CardContent>\n                <Typography variant=\"h5\" color=\"secondary\" gutterBottom sx={{ fontWeight: 600 }}>\n                  {gpu.name} (#{gpu.index})\n                </Typography>\n                <Box sx={{ display: \"flex\", gap: 4, flexWrap: \"wrap\", mb: 2 }}>\n                  <Typography variant=\"h4\" sx={{ color: \"#ffbe0b\" }}>\n                    {gpu.temp}°C\n                  </Typography>\n                  <Typography variant=\"h5\" sx={{ color: \"#00e676\" }}>\n                    {gpu.power}W\n                  </Typography>\n                  <Typography variant=\"h5\" sx={{ color: \"#2979ff\" }}>\n                    {gpu.util}%\n                  </Typography>\n                  <Typography sx={{ color: \"#b2b2b2\" }}>\n                    Fan: {gpu.fan}% | Clock: {gpu.coreClock} MHz | Mem: {gpu.memClock} MHz\n                  </Typography>\n                  <Typography sx={{ color: \"#b2b2b2\" }}>\n                    VRAM: {gpu.memUsed} / {gpu.memTotal} MiB\n                  </Typography>\n                </Box>\n                <Box sx={{ height: 180, mb: 2 }}>\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={history[gpu.index] || []}>\n                      <XAxis dataKey=\"time\" hide />\n                      <YAxis domain={['auto', 'auto']} />\n                      <Tooltip\n                        labelFormatter={t => new Date(t).toLocaleTimeString()}\n                        formatter={(v: any, n: any) => [v, n.toUpperCase()]}\n                      />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"temp\" stroke=\"#ffbe0b\" dot={false} name=\"Temp\" />\n                      <Line type=\"monotone\" dataKey=\"power\" stroke=\"#00e676\" dot={false} name=\"Power\" />\n                      <Line type=\"monotone\" dataKey=\"util\" stroke=\"#2979ff\" dot={false} name=\"Util\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </Box>\n                {/* Overclock Controls */}\n                <Box sx={{ mt: 2 }}>\n                  {gpu.controls.fan && (\n                    <Box mb={2}>\n                      <Typography>Fan Speed (%)</Typography>\n                      <Slider\n                        min={0} max={100}\n                        value={ocValues[gpu.index]?.fan ?? gpu.fan}\n                        onChange={(_, v) => handleOcChange(gpu.index, \"fan\", v as number)}\n                        valueLabelDisplay=\"auto\"\n                        sx={{ color: \"#ffbe0b\" }}\n                      />\n                    </Box>\n                  )}\n                  {gpu.controls.power && (\n                    <Box mb={2}>\n                      <Typography>Power Limit (W)</Typography>\n                      <Slider\n                        min={50} max={gpu.powerLimit}\n                        value={ocValues[gpu.index]?.powerLimit ?? gpu.powerLimit}\n                        onChange={(_, v) => handleOcChange(gpu.index, \"powerLimit\", v as number)}\n                        valueLabelDisplay=\"auto\"\n                        sx={{ color: \"#00e676\" }}\n                      />\n                    </Box>\n                  )}\n                  {gpu.controls.coreClock && (\n                    <Box mb={2}>\n                      <Typography>Core Clock Offset (MHz)</Typography>\n                      <Slider\n                        min={-300} max={300}\n                        value={ocValues[gpu.index]?.coreClock ?? 0}\n                        onChange={(_, v) => handleOcChange(gpu.index, \"coreClock\", v as number)}\n                        valueLabelDisplay=\"auto\"\n                        sx={{ color: \"#2979ff\" }}\n                      />\n                    </Box>\n                  )}\n                  {gpu.controls.memClock && (\n                    <Box mb={2}>\n                      <Typography>Memory Clock Offset (MHz)</Typography>\n                      <Slider\n                        min={-1000} max={2000}\n                        value={ocValues[gpu.index]?.memClock ?? 0}\n                        onChange={(_, v) => handleOcChange(gpu.index, \"memClock\", v as number)}\n                        valueLabelDisplay=\"auto\"\n                        sx={{ color: \"#ab47bc\" }}\n                      />\n                    </Box>\n                  )}\n                  {(gpu.controls.fan || gpu.controls.power || gpu.controls.coreClock || gpu.controls.memClock) && (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      sx={{ mt: 2, px: 4, fontWeight: 600 }}\n                      onClick={() => handleOcApply(gpu)}\n                      startIcon={<SettingsIcon />}\n                    >\n                      Apply Changes\n                    </Button>\n                  )}\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n      {/* Snackbar for errors/success */}\n      <Snackbar\n        open={!!snackbar}\n        autoHideDuration={5000}\n        onClose={() => setSnackbar(null)}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      >\n        <Alert onClose={() => setSnackbar(null)} severity={snackbar?.type || \"success\"}>\n          {snackbar?.msg}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}